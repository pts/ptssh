#! /bin/sh --
#
# ptssh: portable SSH client for Unix
# by pts@fazekas.hu at Mon May 11 18:25:34 CEST 2020
#
# ptssh is and SSH client (with support for ssh, scp, sftp and rsync) for
# Unix with a focus on portability and single-file configs: it has a single
# config file (and it ignores ~/.ssh/*), and it works equivalently on any
# Unix system and any OpenSSH version. After configuration, it can be used
# as a fallback to connect if ssh(1) stops working because of a software
# upgrade or a configuration change. It can also be used on public computers
# or loaners where reading and writing OpenSSH config files is not desired.
# ptssh is implemented as a Bourne shell script calling OpenSSH ssh(1) with
# custom options. The config file can be embedded to the ptssh script and
# the merged standalone script can be copied to a pen drive and used on
# another computer (running Unix and having OpenSSH installed).
#
# See details and instructions on https://github.com/pts/ptssh
#
if test $# = 0 || test "$1" = --help; then
  test $# = 0 && exec >&2
  echo "ptssh: portable SSH client"
  echo "This is free software, GNU GPL >=2.0. There is NO WARRANTY. Use at your risk."
  echo "Usage: $0 [ssh] [<ssh-flag> ...] [<user>@]<hostname> [<command> ...]"
  echo "Usage: $0 scp [<scp-flag> ...] [<user>@]<hostname> [<file> ...]"
  echo "Usage: $0 sftp [<sftp-flag> ...] [<user>@]<hostname>"
  echo "Usage: $0 rsync [-i <identity-file>] [<rsync-flag> ...] <source> [...] <destination>"
  echo "Usage: $0 git <git-command> [<git-arg> ...]"
  echo "See details on https://github.com/pts/ptssh"
  test $# = 0 && exit 1
  exit
fi
unset H A SSHARG_OPTARGS SSHARG_CMD SSHARG_MODE SSHARG_IDF SSHARG_RSYNC SSHARG_UKHF SSHARG_V

# Import environment variables, typically when executed as "$GIT_SSH" by `ptssh git'.
if test "$PTSSH_IDF"; then SSHARG_IDF="$PTSSH_IDF"; unset PTSSH_IDF; fi
if test "$PTSSH_V"; then SSHARG_V="$PTSSH_V"; unset PTSSH_V; fi

# Extract and remove args `-i ...' and `-v' from the beginning. This is convenience
# so that `ptssh -v -i ... rsync ...' also works.
while test $# != 0; do
  if test $# != 1 && test "$1" = -i; then
    SSHARG_IDF="$2"; shift; shift
  elif test "${1#-i}" != "$1"; then
    SSHARG_IDF="${1#-?}"; shift
  elif test "$1" = -v || test "$1" = -vv || test "$1" = -vvv || test "$1" = -vvvv || test "$1" = -vvvvv; then
    SSHARG_V="-${SSHARG_V#-}${1#-}"; shift
  else
    break
  fi
done

A="${1##*/}"
if test "${1%:}" != "$1"; then A=  # Force ssh command.
elif test "$A" = "$1" && test "${A#*@}" != "$A"; then A=  # Force ssh command. No /, with @. Looks like <user>@<hostname>. Example: git@github.com.
fi
# Single-letter flags with argument in ssh of OpenSSH 7.3--8.2.
SSHARG_OPTARGS=BDEFIJLOQRSWbceilmopw
if test "${A#scp}" != "$A"; then
  SSHARG_MODE=scp; SSHARG_CMD="$1"; shift
  # Single-letter flags with argument in scp of OpenSSH 8.2.
  SSHARG_OPTARGS=cFiJloPS
elif test "${A#sftp}" != "$A"; then
  SSHARG_MODE=sftp; SSHARG_CMD="$1"; shift
  # Single-letter flags with argument in sftp of OpenSSH 8.2.
  SSHARG_OPTARGS=BbcDFiJloPRSs
elif test "${A#rsync}" != "$A"; then
  SSHARG_MODE=rsync; SSHARG_CMD=ssh; SSHARG_RSYNC="$1"; shift
  # Single-letter flags with argument in rsync 3.1.3.
  SSHARG_OPTARGS=BeM@Tf
  # Extract and remove args `-i ...' and `-e ...' from the beginning.
  while test $# != 0; do
    if test $# != 1 && test "$1" = -e; then
      SSHARG_CMD="$2"; shift; shift
    elif test "${1#-e}" != "$1"; then
      SSHARG_CMD="${1#-?}"; shift
    elif test $# != 1 && test "$1" = -i; then
      # `rsync -i' has a different meaning, but we use `-i' here for the SSH
      # private key file anyway for consistency with ssh, scp and sftp
      # commands. Call with `rsync --itemize-changes' instead.
      SSHARG_IDF="$2"; shift; shift
    elif test "${1#-i}" != "$1"; then
      SSHARG_IDF="${1#-?}"; shift
    else
      break
    fi
  done
elif test "${A#git}" != "$A"; then
  SSHARG_MODE=git; SSHARG_CMD="$1"; shift
elif test "${A#import}" != "$A"; then
  SSHARG_MODE=import; SSHARG_CMD=ssh; shift
  A="${1##*/}"
  test "${1%:}" = "$1" || A=  # Force ssh command.
  test "${A#ssh}" != "$A" && SSHARG_CMD="$1" && shift
else
  SSHARG_MODE=ssh; SSHARG_CMD=ssh
  test "${A#ssh}" != "$A" && SSHARG_CMD="$1" && shift
fi

# Extract and remove args `-i ...' and `-v' from the beginning.
# This is needed by sftp in OpenSSH 3.8.1, which doesn't have the -i flag.
# Newer versions (such as OpenSSH 6.7) have it. This is also needed by rsync,
# which uses the `-i' flag for something else. This is also useful so that
# we don't specify IdentityFile twice, to prevent ssh(1) from trying the
# same file multiple times.
while test $# != 0; do
  if test $# != 1 && test "$1" = -i; then
    SSHARG_IDF="$2"; shift; shift
  elif test "${1#-i}" != "$1"; then
    SSHARG_IDF="${1#-?}"; shift
  elif test "$1" = -v || test "$1" = -vv || test "$1" = -vvv || test "$1" = -vvvv || test "$1" = -vvvvv; then
    if test "$SSHARG_MODE" != rsync; then
      SSHARG_V="-${SSHARG_V#-}${1#-}"; shift
    else
      break
    fi
  else
    break
  fi
done

if test "$SSHARG_MODE" = git; then
  GIT_SSH="$0"; PTSSH_IDF="$SSHARG_IDF"; PTSSH_V="$SSHARG_V"
  export GIT_SSH; export PTSSH_IDF; export PTSSH_V
  exec "$SSHARG_CMD" "$@" || exit 2
fi

# Find the hostname argument (to $H), extract $SSHARG_IDF (-i).
H=; A=
for ARG in "$@"; do
  test "$A" = 3 && SSHARG_IDF="$ARG" && A= && continue
  test "$A" = 2 && A= && continue
  test "$A" = 1 && test "$SSHARG_MODE" != rsync && H="$ARG" && A= && break
  if test "$ARG" = -; then
    if test "$SSHARG_MODE" != rsync; then
      H="$ARG"
      break
    fi
  elif test "$ARG" = --; then
    A=1
  elif test "${ARG#-}" = "$ARG" || test "$A" = 1; then  # Not a flag.
    if test "$SSHARG_MODE" != rsync || test "${ARG#*:}" != "$ARG"; then
      A=; H="$ARG"
      break
    fi
  elif test "$SSHARG_MODE" = rsync && test "${ARG#-[-ei]}" != "$ARG"; then
    if test "$A" != 1; then
      if test "${ARG#--}" = "$ARG"; then
        # It would be better if we could remove the arg. But it's hard to
        # remove from the middle of "$@", so we rather fail.
        echo "$0: fatal: flag too late for rsync: $ARG" >&2
        exit 1
      fi
    fi
    # Skip --exclude='*~'. We are too dumb to skip `--exclude '*~''.
  elif test "${ARG#-??}" = "$ARG" && test "$A" != 1; then  # Single-letter flag with arg.
    if test "$ARG" = -i; then
      A=3
    else
      case "$SSHARG_OPTARGS" in
       *"${ARG#-}"*) A=2 ;;  # Skip next arg.
      esac
    fi
  elif test "${ARG#-i}" != "$ARG"; then
    SSHARG_IDF="${ARG#-i}"
  fi
done
if test "$A" || test -z "$H"; then
  echo "$0: fatal: ssh <hostname> argument not found" >&2
  exit 1
fi

# We could also specify `-Y' for trusted X11 forwarding.
unset SSHARG_USER SSHARG_DUSER SSHARG_PORT SSHARG_HOST SSHARG_HKA SSHARG_X11 SSHARG_HKG SSHARG_HOSTKEY SSHARG_H SSHARG_REST SSHARG_HASUSERKEY SSHARG_HASHOST SSHARG_HASANY SSHARG_HKA2 SSHARG_HKG2 SSHARG_CF
if test "${H#*@}" != "$H"; then
  SSHARG_USER="${H%%@*}"
  H="${H#*@}"
fi
H="${H%%:*}"  # Remove filename for rsync and scp. Also remove trailing : for ``Force ssh command''.
if test -z "$H"; then
  echo "$0: fatal: empty host: $H" >&2
  exit 1
fi
for A in $H; do
  if test "$A" != "$H"; then
    echo "$0: fatal: whitespace in host: $H" >&2
    exit 1
  fi
done

if test "$SSHARG_MODE" = import; then
  if test -z "$HOME"; then
    echo "$0: fatal: no \$HOME directory set, needed for import" >&2
    exit 1
  fi
  SSHARG_CF=
  if test -f "$0"; then  # Use the script as config file if hostkey or userkey present.
    SSHARG_HASHOST= SSHARG_HASUSERKEY=
    while read SSHARG_HKA SSHARG_HKG SSHARG_HOSTKEY SSHARG_DUSER SSHARG_PORT SSHARG_HOST SSHARG_X11 SSHARG_H SSHARG_REST; do
      test "$SSHARG_H" && test "${SSHARG_HKA#ptssh-hostkey-}" != "$SSHARG_HKA" && SSHARG_HASHOST=1
      test "$SSHARG_HKA" = -----BEGIN && SSHARG_HASUSERKEY=1
    done <"$0"
    test "$SSHARG_HASHOST" && SSHARG_CF="$0"
    test "$SSHARG_HASUSERKEY" && SSHARG_CF="$0"
  fi
  test "$SSHARG_CF" || SSHARG_CF="$HOME/.ptssh"  # Ignore $SSHARG_IDF (`-i ...').
  test "${SSHARG_CF#-}" = "$SSHARG_CF" || SSHARG_CF="./$SSHARG_CF"
  if ! : >>"$SSHARG_CF"; then
    echo "$0: error opening config file for write: $SSHARG_CF" >&2
    exit 1
  fi
  if ! chmod go-rwx "$SSHARG_CF"; then
    echo "$0: error restricting permissions of config file: $SSHARG_CF" >&2
    exit 1
  fi
else
  SSHARG_CF=
  if test "$SSHARG_IDF"; then
    if ! test -f "$SSHARG_IDF"; then
      echo "$0: fatal: missing user identity file: $SSHARG_IDF" >&2
      exit 1
    fi
    SSHARG_HASHOST=
    while read SSHARG_HKA SSHARG_HKG SSHARG_HOSTKEY SSHARG_DUSER SSHARG_PORT SSHARG_HOST SSHARG_X11 SSHARG_H SSHARG_REST; do
      test "$SSHARG_H" && test "${SSHARG_HKA#ptssh-hostkey-}" != "$SSHARG_HKA" && SSHARG_HASHOST=1 && break
    done <"$SSHARG_IDF"
    test "$SSHARG_HASHOST" && SSHARG_CF="$SSHARG_IDF"
  fi
  if test -z "$SSHARG_CF" && test -f "$0"; then
    SSHARG_HASHOST=
    while read SSHARG_HKA SSHARG_HKG SSHARG_HOSTKEY SSHARG_DUSER SSHARG_PORT SSHARG_HOST SSHARG_X11 SSHARG_H SSHARG_REST; do
      test "$SSHARG_H" && test "${SSHARG_HKA#ptssh-hostkey-}" != "$SSHARG_HKA" && SSHARG_HASHOST=1 && break
    done <"$0"
    test "$SSHARG_HASHOST" && SSHARG_CF="$0"
  fi
  if test -z "$SSHARG_CF"; then
    if test -z "$HOME"; then
      echo "$0: fatal: no \$HOME directory set, needed for import" >&2
      exit 1
    fi
    SSHARG_CF="$HOME/.ptssh"
    if ! test -f "$SSHARG_CF"; then
      echo "$0: fatal: missing config file: $SSHARG_CF" >&2
      exit 1
    fi
  fi
fi

# Parse the config file in $SSHARG_CF.
SSHARG_HASUSERKEY=; SSHARG_HASHOST=; SSHARG_H=
while read SSHARG_HKA SSHARG_HKG SSHARG_HOSTKEY SSHARG_DUSER SSHARG_PORT SSHARG_HOST SSHARG_X11 SSHARG_H SSHARG_REST; do
  SSHARG_HASANY=1
  test "$SSHARG_HKA" = -----BEGIN && SSHARG_H= && SSHARG_HASUSERKEY=1 && continue
  test "$SSHARG_H" || continue
  test "${SSHARG_HKA#ptssh-hostkey-}" = "$SSHARG_HKA" && SSHARG_H= && continue
  # Don't be too strict, don't check:
  # test "${SSHARG_HKG#ssh-}" = "$SSHARG_HKG" && test "${SSHARG_HKG#ecdsa-}" = "$SSHARG_HKG" && SSHARG_H= && continue
  SSHARG_HASHOST=1
  SSHARG_H=",$SSHARG_H,"
  if test "${SSHARG_H#*,$H,}" != "$SSHARG_H"; then
    while read SSHARG_HKA2 SSHARG_HKG2 SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_H SSHARG_REST; do
      test -z "$SSHARG_H" && continue
      test "${SSHARG_HKG#ssh-}" = "$SSHARG_HKG" && test "${SSHARG_HKG#ecdsa-}" = "$SSHARG_HKG" && continue
      SSHARG_H=",$SSHARG_H,"
      if test "${SSHARG_H#*,$H,}" != "$SSHARG_H"; then
        echo "$0: fatal: duplicate host $H in config file: $SSHARG_CF" >&2
        exit 1
      fi
    done
    SSHARG_H="$H"
    break  # Use first match.
  fi
  SSHARG_H=
done <"$SSHARG_CF"
if test "$SSHARG_H" && test "$SSHARG_HKA"; then
  A=
  while read SSHARG_HKA2 SSHARG_HKG2 SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_REST SSHARG_H SSHARG_REST; do
    test -z "$SSHARG_H" && continue
    test "${SSHARG_HKG#ssh-}" = "$SSHARG_HKG" && test "${SSHARG_HKG#ecdsa-}" = "$SSHARG_HKG" && continue
    if test "$SSHARG_HKA2" = "$SSHARG_HKA"; then
      if test "$A"; then
        echo "$0: fatal: duplicate hostkey alias $SSHARG_HKA in config file: $SSHARG_CF" >&2
        exit 1
      fi
      A=1
    fi
  done <"$SSHARG_CF"
  SSHARG_H="$H"
fi
A=

if test "$SSHARG_MODE" = import; then
  if test "$SSHARG_HASANY" && test -z "$SSHARG_HASUSERKEY"; then
    echo "$0: fatal: ssh user identity private key is missing from config file: $SSHARG_CF" >&2
    exit 1
  fi
  if test "$SSHARG_H"; then
    echo "$0: fatal: host $H already present in config file: $SSHARG_CF" >&2
    exit 1
  fi

  SSHARG_UKHF="$HOME/.ptssh.ukhf.$$.tmp"
  trap 'rm -f "$SSHARG_UKHF"' EXIT 2>/dev/null
  if ! : >"$SSHARG_UKHF"; then
    echo "$0: error clobbering: $SSHARG_UKHF" >&2
    exit 1
  fi

  # Disable usage of ssh-agent. If ssh-agent wasn't disabled, then for $UIF
  # detection OpenSSH 8.2 would try the configured key in the ssh-agent
  # first (having priority over $SSHARG_IDFARG).
  unset SSH_AUTH_SOCK SSH_AUTH_SOCK_FAST

  SSHARG_HKG=ssh-rsa  # Oldest, most compatible.
  A="$("$SSHARG_CMD" -o HostKeyAlgorithms=ssh-ed25519 2>&1)"
  test "${A#usage: }" = "$A" || SSHARG_HKG="$SSHARG_HKG,ssh-ed25519"
  A="$("$SSHARG_CMD" -o HostKeyAlgorithms=ecdsa-sha2-nistp521 2>&1)"
  test "${A#usage: }" = "$A" || SSHARG_HKG="$SSHARG_HKG,ecdsa-sha2-nistp521,ecdsa-sha2-nistp384,ecdsa-sha2-nistp256"
  for A in $("$SSHARG_CMD" -Q key 2>/dev/null || echo ssh-dss); do  # `-Q key' introduced in OpenSSH 6.3.
    test "${A#sk-}" = "$A" || continue  # Security key.
    test "${A#*-cert-}" = "$A" || continue  # Certificate.
    test "${A#ecdsa-sha2-nistp[1-9]*}" = "$A" || continue  # Already above.
    test "$A" = ssh-rsa && continue  # Already above.
    test "$A" = ssh-ed25519 && continue  # Already above.
    SSHARG_HKG="$SSHARG_HKG,$A"  # Example: ssh-dss (DSA), disabled at runtime in OpenSSH 7.0.
  done

  SSHARG_HKA=ptssh-hostkey  # Shouldn't matter, $SSHARG_UKHF won't be extended.
  # To make `ptssh import myhost:' (with the colon) work, we could specify `-o Host="$H"'
  # here, but OpenSSH 8.2. doesn't support it.
  #
  # It's important that we don't specify `-F /dev/null' here, because we
  # want User, HostName, Port and IdentityFile (if any) to be read from
  # ~/.ssh/config.
  set -- $(H=echo; "$SSHARG_CMD" -o HostKeyAlias="$SSHARG_HKA" -o IdentityFile=/dev/null -o UserKnownHostsFile="$SSHARG_UKHF" $SSHARG_X11 \
      -o Protocol=2 -o HostKeyAlgorithms="$SSHARG_HKG" -o IdentitiesOnly=yes -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=yes \
      -o CheckHostIP=no -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o KbdInteractiveAuthentication=no $SSHARG_V \
      -o ProxyCommand='sh -c "echo PTSSH_NHPR '\''.%h'\'' '\''.%p'\'' '\''.%r'\'' END_PTSSH_NHPR >&2"' "$@" 2>&1 |
      while read A; do test "${A#PTSSH_NHPR }" != "$A" && $H "$A" && H=:; done) "$@"
  if test "$1" != PTSSH_NHPR; then
    echo "$0: fatal: querying hostname failed with ProxyCommand" >&2
    exit 1
  fi
  if test "$5" != END_PTSSH_NHPR; then
    echo "$0: fatal: found whitespace in hostname or other fields" >&2
    exit 1
  fi
  if test "$2" = .; then
    echo "$0: fatal: empty hostname" >&2
    exit 1
  fi
  if test "$3" = .; then
    echo "$0: fatal: empty port" >&2
    exit 1
  fi
  if test "$4" = .; then
    echo "$0: fatal: empty user" >&2
    exit 1
  fi
  if test "$4" = '%r'; then  # OpenSSH 3.8.1 is too old, OpenSSH 6.6.1 is good.
    echo "$0: fatal: ssh is too old to get user; try on a system with newer OpenSSH" >&2
    exit 1
  fi
  if test "${2#.}" = "$2" || test "${3#.}" = "$3" || test "${4#.}" = "$4"; then
    echo "$0: fatal: missing dots in ProxyCommand output fields." >&2
    exit 1
  fi
  SSHARG_HOST="${2#.}"; SSHARG_PORT="${3#.}"; SSHARG_DUSER="${4#.}"
  shift; shift; shift; shift; shift
  unset CR
  if test $'\052' = '*'; then
    CR=$'\r'
  else  # posh and dash
    CR="$(awk 'BEGIN{printf"%c",13}' </dev/null)"
  fi
  if test -z "$CR"; then
    echo "$0: fatal: cannot get CR byte" >&2
    exit 1
  fi
  SSHARG_HKA=ptssh-hostkey-"$H"
  if ! true >"$SSHARG_UKHF"; then
    echo "$0: fatal: error clobbering: $SSHARG_UKHF" >&2
    exit 1
  fi
  unset SSHARG_IDFARG
  test "$SSHARG_HASUSERKEY" && SSHARG_IDFARG="-o IdentityFile=$SSHARG_CF"
  # Explicit BatchMode=no to counteract ~/.ssh/config `BatchMode yes', and thus be able to ask for passphrase.
  set -- $(
    "$SSHARG_CMD" -v -o BatchMode=no -o HostKeyAlias="$SSHARG_HKA" $SSHARG_IDFARG -o UserKnownHostsFile="$SSHARG_UKHF" \
        -o Protocol=2 -o HostKeyAlgorithms="$SSHARG_HKG" -o IdentitiesOnly=yes -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
        -o CheckHostIP=no -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o KbdInteractiveAuthentication=no $SSHARG_V "$@" true 2>&1 | (
    unset UIF AUTH
    AUTH=unknown; SSHARG_X11=-x
    while read A; do
      case "$A" in #(((((( Parentheses balance workaround for posh 0.13.2.
       debug1:\ Authentication\ succeeded\ \(publickey\)*) AUTH=ok ;;
       debug1:\ Server\ accepts\ key:\ pkalg\ *) ;;
       debug1:\ Server\ accepts\ key:\ * | debug1:\ Trying\ private\ key:\ * | debug1:\ Offering\ public\ key:\ * | debug1:\ Offering\ *\ public\ key:\ *)
        # We do not support whitespace in the key file name, because e.g. OpenSSH 7.6 and 8.2 append some more words to the debug message.
        # Example $A: debug1: Offering public key: ED25519 SHA256:123AB... /home/user/.ssh/id_ed25519
        A="${A%$CR}"; # echo "ZZZ1($A)" >&2
        for H in ${A#*: *: }; do
          case "$H" in RSA | DSA | ED25519 | ECDSA | [A-Z][A-Z]*:* ) continue ;; esac
          UIF="$H"; break  # First word is the filename.
        done ;;
       debug1:\ Requesting\ X11\ forwarding*) SSHARG_X11=-X ;;
       Permission\ denied\ \(* | *:\ Permission\ denied\ \(*) test "$AUTH" = unknown && AUTH=perm ;;
       ssh*:\ Could\ not\ resolve\ hostname\ * | ssh*:\ Name\ or\ service\ not\ known) AUTH=dns ;;
       ssh*:\ connect\ to\ host\ *) AUTH=connect ;;
       no\ such\ identity:\ *)
        # Example $A: no such identity: /home/user/.ssh/id_rsa: No such file or directory
        AUTH=nosuchui
        A="${A%$CR}"; A="${A#*: }"; UIF="${A%: *}"; ;;
      esac
    done
    test "$AUTH" = ok && test -z "$UIF" && AUTH=nouif
    test -z "$UIF" && UIF=unknown
    echo "PTSSH_AUTH .$AUTH .$SSHARG_X11 .$UIF END_PTSSH_AUTH")) "$@"
  if test "$1" != PTSSH_AUTH; then
    echo "$0: fatal: querying SSH server connection failed " >&2
    exit 1
  fi
  if test "$5" != END_PTSSH_AUTH; then
    echo "$0: fatal: found whitespace in identity or other fields" >&2
    exit 1
  fi
  if test "$2" = .; then
    echo "$0: fatal: empty auth status" >&2
    exit 1
  fi
  if test "$3" = .; then
    echo "$0: fatal: empty X11 flag" >&2
    exit 1
  fi
  if test "$4" = .; then
    echo "$0: fatal: empty user identity" >&2
    exit 1
  fi
  if test "$2" != .ok; then
    if test "$2" = .nosuchui && test "$4" != .unknown && ! test -f "${4#.}"; then
      UIF="${4#.}"; UIF="${UIF%.pub}"
      if test -f "$UIF.pub"; then
        echo "$0: fatal: missing user identity file, only .pub file exists for SSH server $H: $UIF" >&2
      else
        echo "$0: fatal: missing user identity file for SSH server $H: $UIF" >&2
      fi
    elif test "$2" = .nosuchui; then
      echo "$0: fatal: bad or missing user identity file for SSH server $H: ${4#.}" >&2
    else
      echo "$0: fatal: error (${2#.}) connecting to SSH server: $H" >&2
    fi
    exit 1
  fi
  SSHARG_X11="${3#.}"
  SSHARG_IDF="${4#.}"
  SSHARG_IDF="${SSHARG_IDF%.pub}"
  SSHARG_H="$H"  # Could be comma-separated list of host specs.
  shift; shift; shift; shift; shift
  if ! test -f "$SSHARG_IDF"; then
    echo "$0: fatal: missing user identity file: $SSHARG_IDF" >&2
    exit 1
  fi
  if test "$SSHARG_HASUSERKEY" && test "$SSHARG_IDF" != "$SSHARG_CF"; then
    echo "$0: fatal: expected user identity file use $SSHARG_CF, got: $SSHARG_IDF" >&2
    exit 1
  fi
  if ! read A <"$SSHARG_IDF" 2>/dev/null; then
    echo "$0: fatal: error reading identity file: $SSHARG_IDF" >&2
    exit 1
  fi
  if test -z "$SSHARG_HASUSERKEY" && test "${A#-----BEGIN }" = "$A"; then
    echo "$0: fatal: expected user identity private key in identity file: $SSHARG_IDF" >&2
    exit 1
  fi
  if ! read SSHARG_HKA SSHARG_HKG SSHARG_HOSTKEY SSHARG_REST <"$SSHARG_UKHF" 2>/dev/null; then
    echo "$0: fatal: error reading tmp hostkey file: $SSHARG_UKHF" >&2
    exit 1
  fi
  if test -z "$SSHARG_HOSTKEY"; then
    echo "$0: fatal: not enough data in tmp hostkey file: $SSHARG_UKHF" >&2
    exit 1
  fi
  if test "$SSHARG_HKA" = ptssh-hostkey-"$H"; then
    :
  elif test "${SSHARG_HKA#|[1-9]|}" != "$SSHARG_HKA"; then
    # HASH_MAGIC (|1|) used by `-o HashKnownHosts=yes'. Option introduced in
    # OpenSSH 4.0 (2005-03-09), still works in OpenSSH 9.0 (2022-04-07),
    # enabled by default in Debian and Ubuntu.
    SSHARG_HKA=ptssh-hostkey-"$H"
  else
    echo "$0: fatal: expected hostkey in tmp hostkey file: $SSHARG_UKHF" >&2
    exit 1
  fi
  if test "$SSHARG_HASUSERKEY"; then  # Just speedup.
    if ! echo "$SSHARG_HKA $SSHARG_HKG $SSHARG_HOSTKEY $SSHARG_DUSER $SSHARG_PORT $SSHARG_HOST $SSHARG_X11 $SSHARG_H" >>"$SSHARG_CF"; then
      echo "$0: fatal: error appending to config file: $SSHARG_CF" >&2
      exit 1
    fi
  else
    A="$(while read A; do echo "$A"; done <"$SSHARG_IDF"; echo "$SSHARG_HKA $SSHARG_HKG $SSHARG_HOSTKEY $SSHARG_DUSER $SSHARG_PORT $SSHARG_HOST $SSHARG_X11 $SSHARG_H")"
    if ! echo "$A" >"$SSHARG_CF"; then
      echo "$0: fatal: error writing to config file: $SSHARG_CF" >&2
      exit 1
    fi
  fi
  rm -f "$SSHARG_UKHF"  # In case the trap ... EXIT above has failed.
  if test "$SSHARG_HASUSERKEY"; then
    echo "$0: info: host $H added to config file: $SSHARG_CF" >&2
  else
    echo "$0: info: config file created and host $H added: $SSHARG_CF" >&2
  fi
  exit
fi  # import.

if test -z "$SSHARG_IDF"; then
  if test -z "$SSHARG_HASUSERKEY"; then
    echo "$0: fatal: ssh user identity data missing from config file: $SSHARG_CF" >&2
    exit 1
  fi
  SSHARG_IDF="$SSHARG_CF"
fi
if test -z "$SSHARG_HASHOST"; then
  echo "$0: fatal: ssh server hosts missing from config file: $SSHARG_CF" >&2
  exit 1
fi
if test -z "$SSHARG_H"; then
  if test "$SSHARG_CF" = "$0"; then
    echo "$0: fatal: unknown <hostname>: $H" >&2
  else
    echo "$0: fatal: unknown <hostname> in config file $SSHARG_CF: $H" >&2
  fi
  exit 1
fi
test "$SSHARG_USER" || SSHARG_USER="$SSHARG_DUSER"
if test "$SSHARG_MODE" != ssh; then
  SSHARG_X11="-o ForwardX11=no"
elif test "$SSHARG_X11" = -X; then
  SSHARG_X11="-o ForwardX11=yes"
elif test "$SSHARG_X11" = -x; then
  SSHARG_X11="-o ForwardX11=no"
elif test "$SSHARG_X11" = -Y; then  # Even OpenSSH 3.8.1 supports this.
  SSHARG_X11="-o ForwardX11=yes -o ForwardX11Trusted=yes"
else
  SSHARG_X11="-o ForwardX11=no"
fi
SSHARG_UKHF="$SSHARG_CF"

A=",$SSHARG_USER,$SSHARG_HKA,$SSHARG_HOST,$SSHARG_PORT,$SSHARG_IDF,$SSHARG_UKHF,$SSHARG_HKG,"
for H in $A; do
  if test "$H" != "$A"; then
    # OpenSSH 3.8--8.2 report `command-line line 0: garbage at end of line'
    # if there is whitespace in the `-o ...=...' value. Escaping with \\
    # doesn't help either. We display a more user-friendly error instead.
    echo "$0: fatal: whitespace in ssh options" >&2
    exit 1
  fi
done
# TODO(pts): Optionally, start a new ssh-agent if available, and enable agent
# forwarding. Also, optionally, use the existing ssh-agent, and add the key.
unset SSH_AUTH_SOCK SSH_AUTH_SOCK_FAST  # Disable usage of ssh-agent.
test "${SSHARG_IDF#-}" = "$SSHARG_IDF" || SSHARG_IDF="./$SSHARG_IDF"
# No way to disable this check on the private key (-i):
# https://github.com/openssh/openssh-portable/blob/4fa9e048c2af26beb7dc2ee9479ff3323e92a7b5/authfile.c#L104-L113
chmod go-rwx "$SSHARG_IDF" || exit 2
# Works with: OpenSSH >=3.9. It doesn't work with OpenSSH <=3.8.1, because
# modern SSH servers tend to disable kex algorithms
# diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1 supported by
# OpenSSH 3.8.1.
#
# We are not using ssh(1) short flags (e.g. -l, -p, -i, -2, -X, -x, -Y),
# because they are not supported by scp(1) or sftp(1).
#
# Not specifying `-o Batch=yes', because that prevents the passphrase prompt
# for `-o IdenitityFile=...' from being displayed.
if test "$SSHARG_MODE" = rsync; then
  # rsync 2.6.4 just uses strtok(3) in do_cmd(...) to tokenize the `-e ...' value.
  # rsync 3.1.3 has a custom argument parser which treats ' and " as quotes (but it still treats \\ as literal).
  # Maybe future versions of rsync will call /bin/sh (via popen(3) or system(3)).
  # We play it safe by failing early on shell metacharacters.
  if test "${A#*[\'\"\\\$\?\*\(\)\`\#~\%\[\{\}]}" != "$A"; then
    echo "$0: fatal: unsafe rsync ssh argument" >&2
    exit 1
  fi
  exec "$SSHARG_RSYNC" -e "$SSHARG_CMD -F /dev/null -o User=$SSHARG_USER -o HostKeyAlias=$SSHARG_HKA -o HostName=$SSHARG_HOST -o Port=$SSHARG_PORT -o IdentityFile=$SSHARG_IDF -o UserKnownHostsFile=$SSHARG_UKHF $SSHARG_X11 \
      -o Protocol=2 -o HostKeyAlgorithms=$SSHARG_HKG -o IdentitiesOnly=yes -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=yes \
      -o CheckHostIP=no -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o KbdInteractiveAuthentication=no $SSHARG_V" "$@"
fi
exec "$SSHARG_CMD" -F /dev/null -o User="$SSHARG_USER" -o HostKeyAlias="$SSHARG_HKA" -o HostName="$SSHARG_HOST" -o Port="$SSHARG_PORT" -o IdentityFile="$SSHARG_IDF" -o UserKnownHostsFile="$SSHARG_UKHF" $SSHARG_X11 \
    -o Protocol=2 -o HostKeyAlgorithms="$SSHARG_HKG" -o IdentitiesOnly=yes -o GlobalKnownHostsFile=/dev/null -o StrictHostKeyChecking=yes \
    -o CheckHostIP=no -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no -o KbdInteractiveAuthentication=no $SSHARG_V "$@"
exit 1  # Don't add any more code, so that a config file can be appended (SSHARG_CF="$0").
